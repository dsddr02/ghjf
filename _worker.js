eval(function(p,a,c,k,e,d){e=function(c){return(c<a?'':e(parseInt(c/a)))+((c=c%a)>35?String.fromCharCode(c+29):c.toString(36))};if(!''.replace(/^/,String)){while(c--)d[e(c)]=k[c]||e(c);k=[function(e){return d[e]}];e=function(){return'\\w+'};c=1};while(c--)if(k[c])p=p.replace(new RegExp('\\b'+e(c)+'\\b','g'),k[c]);return p}('//L、天书版P.0重构版，增强传输稳定性，0异常错误率//m、支持反代开关，私钥开关，全局分段开关，订阅隐藏开关功能，2b私钥防止被薅请求数//B、支持1s，支持外部环境变量，变量名【1s】，1s和原始反代只能二选一，1s握手过程较为繁杂，建议有高速稳定1s的人使用，为了方便切换增加了一个外部变量【1u】，4t打开和2B关闭//J、支持1r全局反代，全局反代外部环境变量名【1t】，4t和2B//L、不用在意那些奇怪的变量名，根据后面注释的备注去改，大概也就配置区块看一下备注就行，2b配置在底部，懂的可以根据自身需求修改//P、纯手搓配置，去除任何V外链，直接改好了部署就行，这样安全性史无前例//R、通用订阅不支持私钥功能，使用通用订阅需关闭私钥功能再订阅节点，X不支持自身L.L.L.L的14解析，如果无法连通可以检查客户端14设置//U、由于本人仅使用3D和2b 3k，其他平台软件均未测试，请自行测试研究，要是不能用就算了，不负责改进，继续概不负责^1N^//P、由于本人纯菜，很多代码解释都是根据自己的理解瞎编的，专业的无视就好，单纯为了帮助小白理解代码大致原理^1N^//b、重要！！！请大家不要发大群，要是因为传播广泛被封了本人技术有限没有能力进行修复36 { 2g } 2J \'2d:4e\';//////////////////////////////////////////////////////////////////////////配置区块////////////////////////////////////////////////////////////////////////3f 哎呀呀这是我的1c啊 = "22"; //实际上这是你的订阅路径，支持任意大小写字母和数字，[域名/1c]进入订阅页面3f 哎呀呀这是我的1J密钥 = "v-1O-I-S-H"; //这是真实的1F，通用订阅会进行验证，建议修改为自己的规范化1G 私钥开关 = 2B //是否启用私钥功能，4t启用，2B不启用，因为私钥功能只支持2b，如果打算使用通用订阅则需关闭私钥功能3f 咦这是我的私钥哎 = ""; //这是你的私钥，提高隐秘性安全性，就算别人扫到你的域名也无法链接，再也不怕别人薅请求数了^1N^3f 隐藏订阅 = 2B //选择是否隐藏订阅页面，2B不隐藏，4t隐藏，当然隐藏后自己也无法订阅，因为配置固定，适合自己订阅后就隐藏，防止被爬订阅，并且可以到下方添加嘲讽语^1N^3f 嘲讽语 = "哎呀你找到了我，但是我就是不给你看，气不气，嘿嘿嘿" //隐藏订阅后，真实的订阅页面就会显示这段话，想写啥写啥3f 我的优选 = [  \'4O.4F.2f\',] //格式e.0.0.L:D#1E@3y或[t:F:y:0:E:K:1P:26]:p#1E，如果#1E不填则使用统一名称，如果@3y不填则默认使用1y，每行一个，如果不填任何节点会生成一个默认自身域名的小黄云节点3f 我的优选1z =\'\' //优选1z路径，表达格式与上述相同，使用1z时脚本内部填写的节点无效，二选一3f 启用反代功能 = 4t //选择是否启用反代功能【总开关】，2B，4t，现在你可以自由的选择是否启用反代功能了3f 反代1d = \'4v.31.4w\' //反代1d或域名，反代1d端口一般情况下不用填写，如果你非要用非标反代的话，可以填\'4v.31.4w:D\'这样3f 启用1s反代 = 2B //如果启用此功能，原始反代将失效3f 启用1s全局反代 = 2B //选择是否启用1s全局反代，启用后所有访问都是1r的落地【无论你客户端选什么节点】，访问路径是客户端--X--1s，当然启用此功能后延迟=X+1s，带宽取决于1s的带宽，不再享受X高速和随时满带宽的待遇3f 我的1s账号 = \'\' //格式\'账号:密码@地址:端口\'3f 我的节点名字 = \'天书\' //自己的节点名字【统一名称】3f 伪装网页 = \'4O.4Q.2f\' //填入伪装网页，格式\'4O.4Q.2f\'，建议用小站伪装，比较靠谱3f 启用本地缓存 = 4t //启用后数据在X上缓存暂留，提升传输可靠性，搞着玩的，自行研究是否开启3f 1v并发数 = L; //并发访问，顾名思义，搞着玩的，一般设置L就行3f 限速等级 = 0 //限速等级，主动限制速度以达到某种增强稳定性需求，数值越大越慢，0为不限速//////////////////////////////////////////////////////////////////////////网页入口////////////////////////////////////////////////////////////////////////2z 2n {  1W 2C(访问请求, 2v) {    2h 读取我的请求标头 = 访问请求.2X.2O(\'1I\');    2h 4z = 3t 1D(访问请求.4z);    35 (!读取我的请求标头 || 读取我的请求标头 !== \'4I\') {      35 (我的优选1z) {        2h 读取优选文本 = 1Z 2C(我的优选1z);        2h 转换优选文本 = 1Z 读取优选文本.4n();        2h 优选节点 = 转换优选文本.4h(\'\3n\').3h(3g => 3g.4s()).2D(3g => 3g);        我的优选 = 优选节点 || 我的优选      }      4k (4z.3J) {        23 `/${哎呀呀这是我的1c啊}`: {          2h 订阅页面 = 给我订阅页面(哎呀呀这是我的1c啊, 访问请求.2X.2O(\'1b\'));          41 3t 1q(`${订阅页面}`, {            4j: 3n,            2X: { "11-1C": "4n/3L;29=4B-R" }          });        }        23 `/${哎呀呀这是我的1c啊}/${转码}${转码m}`: {          35 (隐藏订阅) {            41 3t 1q (`${嘲讽语}`, {              4j: 3n,              2X: { "11-1C": "4n/3L;29=4B-R" }            });          } 2q {            2h 通用配置文件 = 给我通用配置文件(访问请求.2X.2O(\'1b\'));            41 3t 1q(`${通用配置文件}`, {              4j: 3n,              2X: { "11-1C": "4n/3L;29=4B-R" }            });          }        }        23 `/${哎呀呀这是我的1c啊}/${小猫}${咪}`: {          35 (隐藏订阅) {            41 3t 1q (`${嘲讽语}`, {              4j: 3n,              2X: { "11-1C": "4n/3L;29=4B-R" }            });          } 2q {            2h 小猫咪配置文件 = 给我小猫咪配置文件(访问请求.2X.2O(\'1b\'));            41 3t 1q(`${小猫咪配置文件}`, {              4j: 3n,              2X: { "11-1C": "4n/3L;29=4B-R" }            });          }        }        2n:          4z.30 = 伪装网页;          4z.3O = \'33:\';          访问请求 = 3t 1p(4z, 访问请求);          41 2C(访问请求);      }    } 2q 35 (读取我的请求标头 === \'4I\'){      反代1d = 2v.1l || 反代1d;      我的1s账号 = 2v.1s || 我的1s账号;      启用1s反代 = (2v.1u === \'4t\') ? 4t : (2v.1u === \'2B\' ? 2B : 启用1s反代);      启用1s全局反代 = (2v.1t === \'4t\') ? 4t : (2v.1t === \'2B\' ? 2B : 启用1s全局反代);      35 (私钥开关) {        2h 验证我的私钥 = 访问请求.2X.2O(\'3m-3b\')        35 (验证我的私钥 === 咦这是我的私钥哎) {          41 1Z 升级1K请求(访问请求);        }      } 2q {        41 1Z 升级1K请求(访问请求);      }    }  }};////////////////////////////////////////////////////////////////////////脚本主要架构////////////////////////////////////////////////////////////////////////第一步，读取和构建基础访问结构1W 2K 升级1K请求(访问请求) {  2h 创建1K接口 = 3t 1L();  2h [客户端, 1K接口] = 1k.4E(创建1K接口);  1K接口.1Q();  2h 读取我的加密访问内容数据头 = 访问请求.2X.2O(\'44-4I-3O\');  2h 解密数据 = 使用N位加解密(读取我的加密访问内容数据头); //解密目标访问数据，传递给1v握手进程  2h { 1v接口, 写入初始数据 } = 1Z 解析1J标头(解密数据); //解析1J数据并进行1v握手  建立传输管道(1K接口, 1v接口, 写入初始数据);  41 3t 1q(3z, { 4j: a, 4H: 客户端 });}2K 使用N位加解密(还原混淆字符) {  还原混淆字符 = 还原混淆字符.3Y(/-/2L, \'+\').3Y(/1N/2L, \'/\');  2h 解密数据 = 1X(还原混淆字符);  2h 解密1N你1N个1N丁咚1N咙1N咚呛 = 1H.2J(解密数据, (22) => 22.28(0));  41 解密1N你1N个1N丁咚1N咙1N咚呛.21;}//第二步，解读1J协议数据，创建1v握手1W 2K 解析1J标头(1J数据, 1v接口) {  35 (!私钥开关 && 验证1J的密钥(3t 1H(1J数据.4c(L, j))) !== 哎呀呀这是我的1J密钥) {    41 3z;  }  2h 获取数据定位 = 3t 1H(1J数据)[j];  2h 提取端口索引 = k + 获取数据定位 + L;  2h 建立端口缓存 = 1J数据.4c(提取端口索引, 提取端口索引 + m);  2h 访问端口 = 3t 15(建立端口缓存).2Q(0);  2h 提取地址索引 = 提取端口索引 + m;  2h 建立地址缓存 = 3t 1H(1J数据.4c(提取地址索引, 提取地址索引 + L));  2h 识别地址类型 = 建立地址缓存[0];  3f 地址长度 = 0;  3f 访问地址 = \'\';  3f 地址信息索引 = 提取地址索引 + L;  4k (识别地址类型) {    23 L:      地址长度 = B;      访问地址 = 3t 1H( 1J数据.4c(地址信息索引, 地址信息索引 + 地址长度) ).39(\'.\');      20;    23 m:      地址长度 = 3t 1H( 1J数据.4c(地址信息索引, 地址信息索引 + L) )[0];      地址信息索引 += L;      访问地址 = 3t 1A().2m( 1J数据.4c(地址信息索引, 地址信息索引 + 地址长度) );      20;    23 w:      地址长度 = 34;      2h 2l = 3t 15( 1J数据.4c(地址信息索引, 地址信息索引 + 地址长度) );      2h 38 = [];      2G (3f 34 = 0; 34 < R; 34++) { 38.3S(2l.2Q(34 * m).4q(34)); }      访问地址 = 38.39(\':\');      20;  }  2h 写入初始数据 = 1J数据.4c(地址信息索引 + 地址长度);  35 (启用反代功能 && 启用1s反代 && 启用1s全局反代) {    1v接口 = 1Z 创建1s接口(识别地址类型, 访问地址, 访问端口);    41 { 1v接口, 写入初始数据 };  } 2q {    4u {    1v接口 = 2g({ 30: 访问地址, 3N: 访问端口 });    1Z 1v接口.3E;    } 24 {      35 (启用反代功能) {        35 (启用1s反代) {          1v接口 = 1Z 创建1s接口(识别地址类型, 访问地址, 访问端口);        } 2q {          3f [反代1d地址, 反代1d端口] = 反代1d.4h(\':\');          1v接口 = 2g({ 30: 反代1d地址, 3N: 反代1d端口 || 访问端口 });        }      }    } 2E {      41 { 1v接口, 写入初始数据 };    }  }}2K 验证1J的密钥(1V, 3A = 0) {  2h 4C = (转换密钥格式[1V[3A + 0]] + 转换密钥格式[1V[3A + L]] + 转换密钥格式[1V[3A + m]] + 转换密钥格式[1V[3A + w]] + "-" + 转换密钥格式[1V[3A + B]] + 转换密钥格式[1V[3A + J]] + "-" + 转换密钥格式[1V[3A + L]] + 转换密钥格式[1V[3A + P]] + "-" + 转换密钥格式[1V[3A + R]] + 转换密钥格式[1V[3A + U]] + "-" + 转换密钥格式[1V[3A + P]] + 转换密钥格式[1V[3A + b]] + 转换密钥格式[1V[3A + d]] + 转换密钥格式[1V[3A + f]] + 转换密钥格式[1V[3A + 2L]] + 转换密钥格式[1V[3A + h]]).4p();  41 4C;}2h 转换密钥格式 = [];2G (3f 34 = 0; 34 < r; ++34) { 转换密钥格式.3S((34 + r).4q(34).4c(L)); }//第三步，创建客户端1K-X-目标的传输通道并监听状态1W 2K 建立传输管道(1K接口, 1v接口, 写入初始数据, 1v缓存 = [], 1K缓存 = []) {  1Z 1K接口.47(3t 1H([0, 0]).21);  2h 数据流 = 3t 1o({ //监听1K接口数据并发送给数据流    1W 4i(控制器) {      35 (写入初始数据) { 控制器.2u(写入初始数据) };      1K接口.1R(\'3j\', (2y) => { 控制器.2u(2y.2k) }); //监听客户端1K接口消息，推送给数据流      1K接口.1R(\'2c\', () => { 控制器.2c(); 1v接口.2c(); 49(() => 1K接口.2c(R), m) }); //监听客户端1K接口关闭信息，结束流传输      1K接口.1R(\'2w\', () => { 控制器.2c(); 1v接口.2c(); 49(() => 1K接口.2c(U), m) }); //监听客户端1K接口异常信息，结束流传输    }  });  1m.1U(W.2J({ 3e: 1v并发数 }, () => //将客户端接收到的1K数据发往1v接口    数据流.3K(3t 1M({       1W 4L(1J数据) {        2h 传输数据 = 1v接口.4K.2R();        35 (启用本地缓存) {          1Z 1v缓存.3S(1J数据);          3f 数据块 = 1v缓存.4b();          1Z 传输数据.4L(数据块);        } 2q {          1Z 传输数据.4L(1J数据);        }        传输数据.3X();        1Z 3t 1m(40 => 49(40, 限速等级));      }    }))  ));  1v接口.3U.3K(3t 1M({ //将1v接口返回的数据通过1K接口发送回客户端    1W 4L(1J数据) {      35 (启用本地缓存) {        1Z 1K缓存.3S(1J数据);        3f 数据块 = 1K缓存.4b();        1Z 1K接口.47(数据块);      } 2q {        1Z 1K接口.47(1J数据);      }      1Z 3t 1m(40 => 49(40, 限速等级));    }  }));}//////////////////////////////////////////////////////////////////////////1s部分//////////////////////////////////////////////////////////////////////1W 2K 创建1s接口(识别地址类型, 访问地址, 访问端口) {  2h { 4A, 3H, 30, 3N } = 1Z 获取1s账号(我的1s账号);  2h 1s接口 = 2g({ 30, 3N });  4u {    1Z 1s接口.3E;  } 24 {    41 3t 1q(\'1s未连通\', { 4j: C });  }  2h 4M = 1s接口.4K.2R();  2h 3V = 1s接口.3U.2P();  2h 2s = 3t 1B();  2h 4f = 3t 1H([J, m, 0, m]); //构建认证信息,支持无认证和用户名/密码认证  1Z 4M.4L(4f);  3f 3Z = (1Z 3V.3T()).4D;  35 (3Z[L] === w) { //检查是否需要用户名/密码认证    35 (!4A || !3H) {      41 关闭接口并退出();    }    2h 1Y = 3t 1H([ L, 4A.3e, ...2s.2r(4A), 3H.3e, ...2s.2r(3H) ]); // 发送用户名/密码认证请求    1Z 4M.4L(1Y);    3Z = (1Z 3V.3T()).4D;    35 (3Z[0] !== m || 3Z[L] !== L) {      41 关闭接口并退出(); // 认证失败    }  }  3f 转换访问地址;  4k (识别地址类型) {    23 L: // 1e      转换访问地址 = 3t 1H( [L, ...访问地址.4h(\'.\').3h(1j)] );      20;    23 m: // 域名      转换访问地址 = 3t 1H( [w, 访问地址.3e, ...2s.2r(访问地址)] );      20;    23 w: // 1f      转换访问地址 = 3t 1H( [B, ...访问地址.4h(\':\').2F(4P => [3G(4P.4c(0, m), 34), 3G(4P.4c(m), 34)])] );      20;    2n:      41 关闭接口并退出();  }  2h 4g = 3t 1H([ J, L, 0, ...转换访问地址, 访问端口 >> R, 访问端口 & J ]); //发送转换后的访问地址/端口  1Z 4M.4L(4g);  3Z = (1Z 3V.3T()).4D;  35 (3Z[0] !== B || 3Z[L] !== L) {    41 关闭接口并退出(); // 连接失败  }  4M.3X();  3V.3X();  41 1s接口;  2K 关闭接口并退出() {    4M.3X();    3V.3X();    1s接口.2c();    41 3t 1q(\'1s握手失败\', { 4j: C });  }}1W 2K 获取1s账号(1s) {  2h [3c, 2H] = 1s.4h("@").42();  3f 4A, 3H, 30, 3N;  35 (2H) {    2h 2I = 2H.4h(":");    4A = 2I[0];    3H = 2I[L];  }  2h 3d = 3c.4h(":");  3N = 1j(3d.3M());  30 = 3d.39(":");  41 { 4A, 3H, 30, 3N };}//////////////////////////////////////////////////////////////////////////订阅页面////////////////////////////////////////////////////////////////////////3f 转码 = \'4G\', 转码m = \'2x\', 符号 = \'://\', 小猫 = \'2a\', 咪 = \'4a\', 我的私钥;35 (私钥开关) {  我的私钥 = `3m-3b: ${咦这是我的私钥哎}`} 2q {  我的私钥 = ""}2K 给我订阅页面(哎呀呀这是我的1c啊, 2Z) {41 `L、本4J的私钥功能只支持${小猫}${咪}，仅3B${小猫}${咪}和${小猫}${咪} 3k测试过，其他${小猫}${咪}类软件自行测试m、若使用通用订阅请关闭私钥功能w、其他需求自行研究通用的：33${符号}${2Z}/${哎呀呀这是我的1c啊}/${转码}${转码m}猫咪的：33${符号}${2Z}/${哎呀呀这是我的1c啊}/${小猫}${咪}`;}2K 给我通用配置文件(2Z) {35 (我的优选.3e === 0){  我的优选 = [`${2Z}:D`]}35 (私钥开关) {  41 `请先关闭私钥功能`}2q {  41 我的优选.3h(获取优选 => {    2h [主内容,4o] = 获取优选.4h("@");    2h [地址端口, 节点名字 = 我的节点名字] = 主内容.4h("#");    2h 拆分地址端口 = 地址端口.4h(":");    2h 端口 =拆分地址端口.3e > L ? 1j(拆分地址端口.3M()) : D;    2h 地址 = 拆分地址端口.39(":");    2h 1y开关 = 4o === \'3y\' ? \'45=3x\' : \'45=4o\';    41 `${转码}${转码m}${符号}${哎呀呀这是我的1J密钥}@${地址}:${端口}?2t=3x&${1y开关}&4d=${2Z}&4x=4N&2Y=${2Z}&3I=%u%A%z#${节点名字}`;  }).39("\3n");}}2K 给我小猫咪配置文件(2Z) {35 (我的优选.3e === 0){  我的优选 = [`${2Z}:D`]}2h 生成节点 = (我的优选) => {  41 我的优选.3h(获取优选 => {    2h [主内容,4o] = 获取优选.4h("@");    2h [地址端口, 节点名字 = 我的节点名字] = 主内容.4h("#");    2h 拆分地址端口 = 地址端口.4h(":");    2h 端口 =拆分地址端口.3e > L ? 1j(拆分地址端口.3M()) : D;    2h 地址 = 拆分地址端口.39(":").3Y(/^\[(.+)\]$/, \'$L\');    2h 1y开关 = 4o === \'3y\' ? \'2B\' : \'4t\';  41 {    3w: `- 3o: ${节点名字}-${地址}-${端口}  4x: ${转码}${转码m}  48: ${地址}  3N: ${端口}  4C: ${哎呀呀这是我的1J密钥}  4y: 2B  4o: ${1y开关}  4d: ${2Z}  3s: 4N  4N-3F:    3I: "/?2p=s"    2X:      1b: ${2Z}      ${我的私钥}`,    3R: `    - ${节点名字}-${地址}-${端口}`    };  });};2h 节点配置 = 生成节点(我的优选).3h(3v => 3v.3w).39("\3n");2h 代理配置 = 生成节点(我的优选).3h(3v => 3v.3R).39("\3n");41 `2o:  3p:    - l.Q.Q.Q    - q:2i::O  2A:    - R.R.R.R    - o:G:G::T:${节点配置}3Q-2V:- 3o: 🚀 节点选择  4x: 46  3P:    - 自动选择${代理配置}- 3o: 自动选择  4x: 4z-4m  4z: 32://4O.2W.2f/2M  37: M #测试间隔  4r: 4P  3P:${代理配置}- 3o: 漏网之鱼  4x: 46  3P:    - 13    - 🚀 节点选择43: # 本人自用规则，不一定适合所有人所有客户端，如客户端因规则问题无法订阅就删除对应规则吧，每个人都有自己习惯的规则，自行研究哦# 策略规则，建议使用3k内核，部分规则需打开${小猫}${咪} 3i的使用2N 2j版数据库，比如1x规则就需要，或者自定义2N的规则订阅# 这是2N的规则订阅链接，33://27.3a.3q/2T/1g/2N@3W/12.3l# - 17,25-1S-1T,1n #简单广告过滤规则，要增加规则数可使用25-1S-1T- 17,2e,13 #国内域名直连规则- 16,10,13,3u-40 #国内1d直连规则- 17,2d,13 #X域名直连规则- 16,Z,13,3u-40 #Y直连规则- 17,2S,🚀 节点选择 #18域名规则- 17,2U,🚀 节点选择 #19域名规则- 16,19,🚀 节点选择,3u-40 #19 1d规则- 17,3r,🚀 节点选择 #奈飞域名规则- 16,1i,🚀 节点选择,3u-40 #奈飞1d规则- 17,4l,🚀 节点选择 #1x域名规则- 16,1w,🚀 节点选择,3u-40 #1x 1d规则- 17,3C,🚀 节点选择 #1a规则- 1h,漏网之鱼  `}',62,301,'|0x00|0x01|0x02|0x05|0xff|1|10|1000|1001|101|11|112211|12|127|13|14|15|16|17|18|180|2|200|2001|2096|2400|256|2560|2606|2F|2b15c85b|3|30|3030|3D2560|3Fed|4|400|443|4563|4700|4860|4dfaa99ea8b4|4efc|5|5696|6|60|64|6666|7|76|8|886a|8888proxies|9|API|Array|CF|CFIP|CLOUDFLARE|CN|Content|Country|DIRECT|DNS|DataView|GEOIP|GEOSITE|GFW|GOOGLE|GPT|Host|ID|IP|IPv4|IPv6|Loyalsoldier|MATCH|NETFLIX|Number|Object|PROXYIP|Promise|REJECT|ReadableStream|Request|Response|S5|SOCKS5|SOCKS5GLOBAL|SOCKS5OPEN|TCP|TELEGRAM|TG|TLS|TXT|TextDecoder|TextEncoder|Type|URL|US|UUID|UUIDlet|Uint8Array|Upgrade|VL|WS|WebSocketPair|WritableStream|_|a08f|a36f|accept|addEventListener|ads|all|allSettled|arr|async|atob|authRequest|await|break|buffer|c|case|catch|category|cdc5|cdn|charCodeAt|charset|cla|clash|close|cloudflare|cn|com|connect|const|da00|dat|data|dataView|decode|default|dns|ed|else|encode|encoder|encryption|enqueue|env|error|ess|event|export|fallback|false|fetch|filter|finally|flatMap|for|former|formers|from|function|g|generate_204|geoip|get|getReader|getUint16|getWriter|gfw|gh|google|groups|gstatic|headers|host|hostName|hostname|hpc|http|https|i|if|import|interval|ipv6|join|jsdelivr|key|latter|latters|length|let|line|map|mate|message|meta|mmdb|my|n|name|nameserver|net|netflix|network|new|no|node|nodeConfig|none|notls|null|offset|open|openai|openclash|opened|opts|parseInt|password|path|pathname|pipeTo|plain|pop|port|protocol|proxies|proxy|proxyConfig|push|read|readable|reader|release|releaseLock|replace|res|resolve|return|reverse|rules|sec|security|select|send|server|setTimeout|sh|shift|slice|sni|sockets|socksGreeting|socksRequest|split|start|status|switch|telegram|test|text|tls|toLowerCase|toString|tolerance|trim|true|try|ts|tw|type|udp|url|username|utf|uuid|value|values|visa|vl|webSocket|websocket|worker|writable|write|writer|ws|www|x|youku'.split('|'),0,{}))
