import{connect}from"cloudflare:sockets";let 哎呀呀这是我的ID啊="112211",哎呀呀这是我的VL密钥="2b15c85b-a08f-4efc-886a-4dfaa99ea8b4",私钥开关=!1,咦这是我的私钥哎="",隐藏订阅=!0,嘲讽语="哎呀你找到了我，但是我就是不给你看，气不气，嘿嘿嘿",我的优选=["www.visa.com"],我的优选TXT="https://raw.githubusercontent.com/TgDaosheng/Cloudflare-Trojan/main/ipv4.txt",启用反代功能=!0,反代IP="ts.hpc.tw",启用SOCKS5反代=!1,启用SOCKS5全局反代=!1,我的SOCKS5账号="",我的节点名字="天书",伪装网页="www.youku.com",启用本地缓存=!0,TCP并发数=1,限速等级=0;export default{async fetch(e,t){const n=e.headers.get("Upgrade"),a=new URL(e.url);if(n&&"websocket"===n){if("websocket"===n){if(反代IP=t.PROXYIP||反代IP,我的SOCKS5账号=t.SOCKS5||我的SOCKS5账号,启用SOCKS5反代="true"===t.SOCKS5OPEN||"false"!==t.SOCKS5OPEN&&启用SOCKS5反代,启用SOCKS5全局反代="true"===t.SOCKS5GLOBAL||"false"!==t.SOCKS5GLOBAL&&启用SOCKS5全局反代,!私钥开关)return await 升级WS请求(e);if(e.headers.get("my-key")===咦这是我的私钥哎)return await 升级WS请求(e)}}else{if(我的优选TXT){const e=await fetch(我的优选TXT),t=(await e.text()).split("\n").map((e=>e.trim())).filter((e=>e));我的优选=t||我的优选}switch(a.pathname){case`/${哎呀呀这是我的ID啊}`:{const t=给我订阅页面(哎呀呀这是我的ID啊,e.headers.get("Host"));return new Response(`${t}`,{status:200,headers:{"Content-Type":"text/plain;charset=utf-8"}})}case`/${哎呀呀这是我的ID啊}/${转码}${转码2}`:if(隐藏订阅)return new Response(`${嘲讽语}`,{status:200,headers:{"Content-Type":"text/plain;charset=utf-8"}});{const t=给我通用配置文件(e.headers.get("Host"));return new Response(`${t}`,{status:200,headers:{"Content-Type":"text/plain;charset=utf-8"}})}case`/${哎呀呀这是我的ID啊}/${小猫}${咪}`:if(隐藏订阅)return new Response(`${嘲讽语}`,{status:200,headers:{"Content-Type":"text/plain;charset=utf-8"}});{const t=给我小猫咪配置文件(e.headers.get("Host"));return new Response(`${t}`,{status:200,headers:{"Content-Type":"text/plain;charset=utf-8"}})}default:return a.hostname=伪装网页,a.protocol="https:",e=new Request(a,e),fetch(e)}}}};async function 升级WS请求(e){const t=new WebSocketPair,[n,a]=Object.values(t);a.accept();const s=使用64位加解密(e.headers.get("sec-websocket-protocol")),{"TCP接口":r,"写入初始数据":o}=await 解析VL标头(s);return 建立传输管道(a,r,o),new Response(null,{status:101,webSocket:n})}function 使用64位加解密(e){e=e.replace(/-/g,"+").replace(/_/g,"/");const t=atob(e);return Uint8Array.from(t,(e=>e.charCodeAt(0))).buffer}async function 解析VL标头(e,t){if(!私钥开关&&验证VL的密钥(new Uint8Array(e.slice(1,17)))!==哎呀呀这是我的VL密钥)return null;const n=18+new Uint8Array(e)[17]+1,a=e.slice(n,n+2),s=new DataView(a).getUint16(0),r=n+2,o=new Uint8Array(e.slice(r,r+1))[0];let i=0,c="",l=r+1;switch(o){case 1:i=4,c=new Uint8Array(e.slice(l,l+i)).join(".");break;case 2:i=new Uint8Array(e.slice(l,l+1))[0],l+=1,c=(new TextDecoder).decode(e.slice(l,l+i));break;case 3:i=16;const t=new DataView(e.slice(l,l+i)),n=[];for(let e=0;e<8;e++)n.push(t.getUint16(2*e).toString(16));c=n.join(":")}const p=e.slice(l+i);if(启用反代功能&&启用SOCKS5反代&&启用SOCKS5全局反代)return{"TCP接口":t=await 创建SOCKS5接口(o,c,s),"写入初始数据":p};try{t=connect({hostname:c,port:s}),await t.opened}catch{if(启用反代功能)if(启用SOCKS5反代)t=await 创建SOCKS5接口(o,c,s);else{let[e,n]=反代IP.split(":");t=connect({hostname:e,port:n||s})}}finally{return{"TCP接口":t,"写入初始数据":p}}}function 验证VL的密钥(e,t=0){return(转换密钥格式[e[t+0]]+转换密钥格式[e[t+1]]+转换密钥格式[e[t+2]]+转换密钥格式[e[t+3]]+"-"+转换密钥格式[e[t+4]]+转换密钥格式[e[t+5]]+"-"+转换密钥格式[e[t+6]]+转换密钥格式[e[t+7]]+"-"+转换密钥格式[e[t+8]]+转换密钥格式[e[t+9]]+"-"+转换密钥格式[e[t+10]]+转换密钥格式[e[t+11]]+转换密钥格式[e[t+12]]+转换密钥格式[e[t+13]]+转换密钥格式[e[t+14]]+转换密钥格式[e[t+15]]).toLowerCase()}const 转换密钥格式=[];for(let e=0;e<256;++e)转换密钥格式.push((e+256).toString(16).slice(1));async function 建立传输管道(e,t,n,a=[],s=[]){await e.send(new Uint8Array([0,0]).buffer);const r=new ReadableStream({async start(a){n&&a.enqueue(n),e.addEventListener("message",(e=>{a.enqueue(e.data)})),e.addEventListener("close",(()=>{a.close(),t.close(),setTimeout((()=>e.close(1e3)),2)})),e.addEventListener("error",(()=>{a.close(),t.close(),setTimeout((()=>e.close(1001)),2)}))}});Promise.allSettled(Array.from({length:TCP并发数},(()=>r.pipeTo(new WritableStream({async write(e){const n=t.writable.getWriter();if(启用本地缓存){await a.push(e);let t=a.shift();await n.write(t)}else await n.write(e);n.releaseLock(),await new Promise((e=>setTimeout(e,限速等级)))}}))))),t.readable.pipeTo(new WritableStream({async write(t){if(启用本地缓存){await s.push(t);let n=s.shift();await e.send(n)}else await e.send(t);await new Promise((e=>setTimeout(e,限速等级)))}}))}async function 创建SOCKS5接口(e,t,n){const{username:a,password:s,hostname:r,port:o}=await 获取SOCKS5账号(我的SOCKS5账号),i=connect({hostname:r,port:o});try{await i.opened}catch{return new Response("SOCKS5未连通",{status:400})}const c=i.writable.getWriter(),l=i.readable.getReader(),p=new TextEncoder,u=new Uint8Array([5,2,0,2]);await c.write(u);let w,f=(await l.read()).value;if(2===f[1]){if(!a||!s)return 关闭接口并退出();const e=new Uint8Array([1,a.length,...p.encode(a),s.length,...p.encode(s)]);if(await c.write(e),f=(await l.read()).value,1!==f[0]||0!==f[1])return 关闭接口并退出()}switch(e){case 1:w=new Uint8Array([1,...t.split(".").map(Number)]);break;case 2:w=new Uint8Array([3,t.length,...p.encode(t)]);break;case 3:w=new Uint8Array([4,...t.split(":").flatMap((e=>[parseInt(e.slice(0,2),16),parseInt(e.slice(2),16)]))]);break;default:return 关闭接口并退出()}const S=new Uint8Array([5,1,0,...w,n>>8,255&n]);return await c.write(S),f=(await l.read()).value,5!==f[0]||0!==f[1]?关闭接口并退出():(c.releaseLock(),l.releaseLock(),i);function 关闭接口并退出(){return c.releaseLock(),l.releaseLock(),i.close(),new Response("SOCKS5握手失败",{status:400})}}async function 获取SOCKS5账号(e){const[t,n]=e.split("@").reverse();let a,s,r,o;if(n){const e=n.split(":");a=e[0],s=e[1]}const i=t.split(":");return o=Number(i.pop()),r=i.join(":"),{username:a,password:s,hostname:r,port:o}}let 我的私钥,转码="vl",转码2="ess",符号="://",小猫="cla",咪="sh";function 给我订阅页面(e,t){return`\n1、本worker的私钥功能只支持${小猫}${咪}，仅open${小猫}${咪}和${小猫}${咪} meta测试过，其他${小猫}${咪}类软件自行测试\n2、若使用通用订阅请关闭私钥功能\n3、其他需求自行研究\n通用的：https${符号}${t}/${e}/${转码}${转码2}\n猫咪的：https${符号}${t}/${e}/${小猫}${咪}\n`}function 给我通用配置文件(e){return 0===我的优选.length&&(我的优选=[`${e}:443`]),私钥开关?"请先关闭私钥功能":我的优选.map((t=>{const[n,a]=t.split("@"),[s,r=我的节点名字]=n.split("#"),o=s.split(":"),i=o.length>1?Number(o.pop()):443,c=o.join(":");return`${转码}${转码2}${符号}${哎呀呀这是我的VL密钥}@${c}:${i}?encryption=none&${"notls"===a?"security=none":"security=tls"}&sni=${e}&type=ws&host=${e}&path=%2F%3Fed%3D2560#${r}`})).join("\n")}function 给我小猫咪配置文件(e){0===我的优选.length&&(我的优选=[`${e}:443`]);const 生成节点=t=>t.map((t=>{const[n,a]=t.split("@"),[s,r=我的节点名字]=n.split("#"),o=s.split(":"),i=o.length>1?Number(o.pop()):443,c=o.join(":").replace(/^\[(.+)\]$/,"$1");return{nodeConfig:`- name: ${r}-${c}-${i}\n  type: ${转码}${转码2}\n  server: ${c}\n  port: ${i}\n  uuid: ${哎呀呀这是我的VL密钥}\n  udp: false\n  tls: ${"notls"===a?"false":"true"}\n  sni: ${e}\n  network: ws\n  ws-opts:\n    path: "/?ed=2560"\n    headers:\n      Host: ${e}\n      ${我的私钥}`,proxyConfig:`    - ${r}-${c}-${i}`}})),t=生成节点(我的优选).map((e=>e.nodeConfig)).join("\n"),n=生成节点(我的优选).map((e=>e.proxyConfig)).join("\n");return`\ndns:\n  nameserver:\n    - 180.76.76.76\n    - 2400:da00::6666\n  fallback:\n    - 8.8.8.8\n    - 2001:4860:4860::8888\nproxies:\n${t}\nproxy-groups:\n- name: 🚀 节点选择\n  type: select\n  proxies:\n    - 自动选择\n${n}\n- name: 自动选择\n  type: url-test\n  url: http://www.gstatic.com/generate_204\n  interval: 60 #测试间隔\n  tolerance: 30\n  proxies:\n${n}\n- name: 漏网之鱼\n  type: select\n  proxies:\n    - DIRECT\n    - 🚀 节点选择\nrules: # 本人自用规则，不一定适合所有人所有客户端，如客户端因规则问题无法订阅就删除对应规则吧，每个人都有自己习惯的规则，自行研究哦\n# 策略规则，建议使用meta内核，部分规则需打开${小猫}${咪} mate的使用geoip dat版数据库，比如TG规则就需要，或者自定义geoip的规则订阅\n# 这是geoip的规则订阅链接，https://cdn.jsdelivr.net/gh/Loyalsoldier/geoip@release/Country.mmdb\n# - GEOSITE,category-ads-all,REJECT #简单广告过滤规则，要增加规则数可使用category-ads-all\n- GEOSITE,cn,DIRECT #国内域名直连规则\n- GEOIP,CN,DIRECT,no-resolve #国内IP直连规则\n- GEOSITE,cloudflare,DIRECT #CF域名直连规则\n- GEOIP,CLOUDFLARE,DIRECT,no-resolve #CFIP直连规则\n- GEOSITE,gfw,🚀 节点选择 #GFW域名规则\n- GEOSITE,google,🚀 节点选择 #GOOGLE域名规则\n- GEOIP,GOOGLE,🚀 节点选择,no-resolve #GOOGLE IP规则\n- GEOSITE,netflix,🚀 节点选择 #奈飞域名规则\n- GEOIP,NETFLIX,🚀 节点选择,no-resolve #奈飞IP规则\n- GEOSITE,telegram,🚀 节点选择 #TG域名规则\n- GEOIP,TELEGRAM,🚀 节点选择,no-resolve #TG IP规则\n- GEOSITE,openai,🚀 节点选择 #GPT规则\n- MATCH,漏网之鱼\n  `}我的私钥=私钥开关?`my-key: ${咦这是我的私钥哎}`:"";
